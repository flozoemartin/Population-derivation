********************************************************************************

* Cleaning dose_frequency, dose_number & qty for deriving a clean daily_dose & prescr_length ready for imputation using Hein's codelist (2014)

* Author: Flo Martin

* Date: 02/11/2021

********************************************************************************

* Datasets generated by this do-file

	* AD_pxn_events_from_All_Therapy_clean.dta - all the prescriptions for antidepressants that occur within a year of patient's first pregnancy or after in the pregnancy register cleaned (hot-decking imputation in subsequent do-file)

********************************************************************************

* Start logging

	log using "$Logdir\3_exposure\1_cleaning ad prescriptions.txt", replace
	
********************************************************************************

* Incorporate pregnancy dates

* In order for only prescriptions that are relevant to our pregnancies to be cleaned, match all therapy events to the pregnancy register days in relation to 1 year before pregnancy

	use "$Datadir\derived_data\pregnancy_cohort_final.dta", clear
	
	sort patid pregstart_num
	
	keep patid pregid pregstart_num pregend_num secondtrim_num thirdtrim_num
	sort patid pregid
	order patid pregid pregstart_num pregend_num
		
	* Create variable to indicate the start of the study period and other variables relating to timing of pregnancy. 
			
		gen pregstart_minus365=.
		replace pregstart_minus365 = pregstart_num-365
		label variable pregstart_minus365 "Estimated start of pregnancy minus 1 year"
		
		gen pregstart_minus2mnths=.
		format pregstart_minus2mnths %9.0g
		replace pregstart_minus2mnths = pregstart_num-61
		label variable pregstart_minus2mnths "Estimated start of pregnancy minus 2 months"
		
		order patid pregid pregstart_minus365 pregstart_minus2mnths /*
		*/ pregstart_num secondtrim_num thirdtrim_num pregend_num
	
	by patid: egen seq=seq() // generate sequence of pregnancies in cohort for each mother
	order patid pregstart_num seq
	label variable seq "Sequence of each pregnancy for each patient"
	
	keep if seq==1 // Keep first pregnancies - this allows us to lose any prescriptions that happen more than 1 year prior to pregnancy thus patients whose total antidepressant history happens more than 1 year prior to pregnancy
	
* Merge this dataset of patients from the pregnancy register with the antidepressant prescription events from all the therapy files 
	
	merge 1:m patid using "$Tempdatadir\AD_pxn_events_from_All_Therapy.dta", keep(3) nogen
	
	count // 8,640,923 prescriptions happened within a year of their first pregnancy and beyond...
	unique patid // ...in 336,455 individual patients

********************************************************************************

* Now we can clean the remaining prescriptions ready for hot-decking imputation for missing values - hand-cleaning dose_frequency, dose_number & quantity will allow for extra information to be gleaned from available information (in dosage_text & packtype_desc). Implausible values may then be changed to missing and imputed using a hot-decking approach
	
* Dataset management
	
* Label the class variable

	label define class_lb 1"SSRI" 2"SNRI/NRI" 3"TCA" 4"MAOI" 5"RIMA" 6"SMS" 7"Atypical"

	label values class class_lb
	
	tab class
	
	label variable productname"Commercial name of the drug"
	label variable drugsubstance"Name of the active drug compound"
	label variable class "7 antidepressant classes" 
	
	tab class, m
	
/*           
          7 |
antidepress |
ant classes |      Freq.     Percent        Cum.
------------+-----------------------------------
       SSRI |  5,936,632       68.70       68.70
   SNRI/NRI |    820,780        9.50       78.20
        TCA |  1,290,863       14.94       93.14
       MAOI |      1,691        0.02       93.16
       RIMA |      3,515        0.04       93.20
        SMS |      3,737        0.04       93.24
   Atypical |    583,705        6.76      100.00
------------+-----------------------------------
      Total |  8,640,923      100.00
*/
	
* Generate a variable that pulls the year from the event date
	
	gen event_yr = year(eventdate_num)
	label variable event_yr"Year that the therapy was made"
	
	tab event_yr class
	
	* Start year 1973 end year 2022 

* Merge dosage information from the common dosages lookup file
	
	merge m:1 dosageid using "$Lookupsdir/stata/common_dosages.dta", keep(master match)
	tab _merge
	drop _merge
	count
	
	label variable daily_dose"Numerical daily dose extracted from dosage text"
	label variable dosage_text"Anonymised dosage text associated with dosageid"
	label variable dose_number"Amount in each dose"
	label variable dose_unit"Unit of each dose"
	label variable dose_frequency"How often a dose is taken in a day"
	label variable dose_interval"Time span in days that the dose is over, e.g. 1 every 2 weeks = 14, 4 a day = 0.250"
	label variable choice_of_dose"Indicates if there is a choice the user can make as to how much they can take"
	label variable dose_max_average"If dose was averaged, value = 2, if maximum was taken, value = 1, otherwise 0"
	label variable change_dose"If an option between 2 parts of the dose was available, indicates the part used"
	label variable dose_duration"If specified, the number of days the prescription is for"
	
* Merge packtype description from the pack type lookup file
	
	merge m:1 packtype using "$Lookupsdir/stata/packtype.dta", keep(master match) keepusing(packtype_desc)
	tab _merge
	drop _merge
	count
	
	label variable packtype_desc"Pack size or type of the prescribed product"
	
********************************************************************************

* Derive useful variables for cleaning dose_frequency & dose_number 	
	
	* Generate a milligram variable - dose_mg
	
		tab productname
		gen dose_mg_str = regexs(1) if regexm(productname, "([0-9]+)mg") 
		tab dose_mg_str, m
		
		tab productname if dose_mg_str==""
		
	* Generate a millileter variable - dose_ml
		
		gen dose_ml_str = regexs(1) if (regexm(productname, "([0-9]+)ml"))
		replace dose_ml_str = "1" if (regexm(productname, "mg/ml"))
		tab dose_ml_str, m
		
		tab productname if dose_ml_str==""
		
	* Turn string variables into numerical
	
		gen dose_ml = real(dose_ml_str)
		gen dose_mg = real(dose_mg_str)
		
		drop dose_ml_str dose_mg_str
		
		tab dose_ml
		tab dose_mg 
		
	* For those that have milligrams in the productname but were not picked up in the original dose_mg code
		
		tab productname if dose_mg==.
		
		* Drugs with mg spaced from number e.g. "25 mg"
		gen dose_mg_str = regexs(1) if regexm(productname, "([0-9]+) mg") & dose_mg==.
		tab dose_mg_str
		replace dose_mg = real(dose_mg_str) if dose_mg_str!="" & dose_mg==.
		drop dose_mg_str
		
		tab productname if dose_mg==.
		
		* Drugs with just a two figure number and no milligrams e.g. "Concordin 10"
		gen dose_mg_str = regexs(1) if regexm(productname, "([0-9]+[0-9])") & dose_mg==.
		tab dose_mg_str
		replace dose_mg = real(dose_mg_str) if dose_mg_str!="" & dose_mg==.
		drop dose_mg_str
		
		* Drugs with just a one figure number and no milligrams e.g. "Concordin 5"
		tab productname if dose_mg==.
		gen dose_mg_str = regexs(1) if regexm(productname, "([0-9])") & dose_mg==.
		tab dose_mg_str
		replace dose_mg = real(dose_mg_str) if dose_mg_str!="" & dose_mg==.
		drop dose_mg_str	
		
		tab productname if dose_mg==.
		
* Scan productname to obtain missing dose_units

		tab dose_unit, m

		tab productname if dose_unit==""
		
		gen flag_tab = 1 if regexm(productname, "tab")
		
		gen flag_cap = 1 if regexm(productname, "cap")
		
		gen flag_drops = 1 if regexm(productname, "drops")
		
		gen flag_ml = 1 if regexm(productname, "suspension") | ///
							regexm(productname, "solution") | 	///
							regexm(productname, "liquid") | ///
							regexm(productname, "syr")
		
		replace dose_unit = "TAB" if flag_tab==1 | productname=="nefazodone starter pack"
										
		replace dose_unit = "CAP" if flag_cap==1
		
		replace dose_unit = "DROPS" if flag_drops==1
		
		replace dose_unit = "ML" if flag_ml==1
		
		drop flag_tab flag_cap flag_drops flag_ml
		
		tab dose_unit, m
		
		tab productname if dose_unit==""
		tab productname if dose_unit=="CAP"
		tab productname if dose_unit=="TAB"
		tab productname if dose_unit=="DROPS"
		tab productname if dose_unit=="ML"

		* CAP = 2,343,981
		* DROPS = 4,015
		* ML = 26,509
		* TAB = 6,266,403
		
********************************************************************************

* Retain original CPRD variables before hand cleaning and explore variables
		
* Daily dose = dose frequency x dose number 

	gen dose_frequency_original = dose_frequency
	gen dose_number_original = dose_number
	gen qty_original = qty
	
	* Let's look at how dose_frequency and dose_number are derived from dosage_text
	
		list dose_frequency dose_number dosage_text in 1/100
			
		* So dose_frequency tells you how often the medicine is taken and dose_number tells you how many of the medicine are taken on each occasion
		
		* e.g. 	dosage_text = "1 TAB MORNING AND NIGHT"
		*		dose_frequency = 2
		*		dose_number = 1
		
********************************************************************************

* Clean dose_frequency using dosage_text
		
		tab dose_frequency, m
			
		* Within dose_frequency (how often medicine is taken) we have some zero's (n = 319,536) and some high numbers (> 6, n = 1,180) which seem implausible - also missing where some might be available (n = 906,727)
		
		tab dosage_text if dose_frequency==0
			
		* Lots of these as "as required", "as needed", "as discussed" & PRN so generate a variable that removes some of these making the list smaller & easier to hand clean
		
			gen as_req = 1 if dose_frequency==0 & (regexm(dosage_text, "AS") | regexm(dosage_text, "MDU") | regexm(dosage_text, "DEPRESSION") | regexm(dosage_text, "WHEN") | regexm(dosage_text, "PRN") | regexm(dosage_text, "UNKNOWN") | regexm(dosage_text, "REDUCING")) 
			
			tab dosage_text if as_req==1 // n = 75,166 definitely without useful text for dose_frequency
			
			tab dosage_text if dose_frequency==0 & as_req!=1 // n = 244,597 with potentially useful information
			
		* Some of these can be recoded as actual frequencies then the rest may be recoded as missing (as no dose frequency would be 0)
		
			replace dose_frequency = 1 if dose_frequency==0 & dosage_text=="0NE A DAY"
			replace dose_frequency = 0.5 if dose_frequency==0 & dosage_text=="1 ALTERNATIVE DAYS"
			replace dose_frequency = 0.333 if dose_frequency==0 & dosage_text=="1 EVERY 3RD DAY"
			replace dose_frequency = 0.5 if dose_frequency==0 & dosage_text=="ALTERNATIVE DAYS"
			replace dose_frequency = 1 if dose_frequency==0 & dosage_text=="MORNE"
			replace dose_frequency = 1 if dose_frequency==0 & dosage_text=="MARNE"
			replace dose_frequency = 1 if dose_frequency==0 & dosage_text=="NIGHTLY"
			replace dose_frequency = 1 if dose_frequency==0 & dosage_text=="ODS" // every day
			replace dose_frequency = 0.2 if dose_frequency==0 & dosage_text=="ONE EVERY FOUR DAY"
			replace dose_frequency = 1 if dose_frequency==0 & dosage_text=="TAKE 12 HOURS BEFORE RISING"
			replace dose_frequency = 1 if dose_frequency==0 & dosage_text=="TAKE 2 NIGHTLY"
			replace dose_frequency = 0.5 if dose_frequency==0 & dosage_text=="TAKE ONE ALTERNATIVE DAYS"
			replace dose_frequency = 1 if dose_frequency==0 & dosage_text=="TAKE ONE DAILEY"
			replace dose_frequency = 1 if dose_frequency==0 & dosage_text=="TAKE ONE DAILLY"
			replace dose_frequency = 1 if dose_frequency==0 & dosage_text=="TAKE ONE EVENINGS"
			replace dose_frequency = 0.5 if dose_frequency==0 & dosage_text=="TAKE ONE EVERY 2ND DAY"
			replace dose_frequency = 1 if dose_frequency==0 & dosage_text=="TAKE ONE NIGHTLY"
			replace dose_frequency = 1 if dose_frequency==0 & dosage_text=="TAKE TWO NIGHTLY"
			
			tab dose_frequency, m // Now, n = 319,041 for dose_frequency==0 (will change to missing after analysing missing)
			
			drop as_req
			
		* Check out the weird decimals within normal values
		
			* dose_frequency = 0.333 (n = 24) and 0.5 (n = 78) (I changed these from zero above)
		
			tab dosage_text if dose_frequency<1 & dose_frequency>0
			
			* dose_frequency = 1.142857 (n = 2,005)
			
			tab dosage_text if dose_frequency>1 & dose_frequency<1.2 // take one daily issue pxn weekly
			replace dose_frequency = 1 if (dose_frequency>1 & dose_frequency<1.2) 
			
			* dose_frequency = 1.2 (n = 9) and 1.3 (n = 1)
			
			tab dosage_text if dose_frequency>1.1 & dose_frequency<=1.3
			replace dose_frequency = 2 if (dose_frequency>1.1 & dose_frequency<=1.3)
			
			* dose_frequency = 1.333 (n = 56)
			
			tab dosage_text if dose_frequency>1.3 & dose_frequency<1.5
			replace dose_frequency = 2 if (dose_frequency>1.3 & dose_frequency<1.5) 
			
			* dose_frequency = 1.667 (n = 255)
			
			tab dosage_text if dose_frequency>1.5 & dose_frequency<1.8
			replace dose_frequency = 1 if regexm(dosage_text, ".8PM") & dose_frequency>1.5 & dose_frequency<1.8
			replace dose_frequency = 2 if dose_frequency>1.5 & dose_frequency<1.8
			
			* dose_frequency = 2.142857 (n = 36) & 2.333 (n = 13)
			
			tab dosage_text if dose_frequency>2 & dose_frequency<2.5
			replace dose_frequency = 2 if dose_frequency>2 & dose_frequency<2.5
			
			* dose_frequency = 3.5 (n = 25)
			
			tab dosage_text if dose_frequency==3.5
			replace dose_frequency = 3 if dosage_text=="2 TWICE A DAY 3 AT NIGHT"
			replace dose_frequency = 3 if dosage_text=="2 TWICE A DAY AND 3 AT NIGHT"
			
			* dose_frequency = 4 (n = 2,758)
			
			tab dosage_text if dose_frequency==4
			
			gen flag_4 = 4 if (regexm(dosage_text, "FOUR TIMES") |  ///
							   regexm(dosage_text, "4 TIMES") |     ///
							   regexm(dosage_text, "4TIMES") |      ///
							   regexm(dosage_text, "QDS") | 	    ///
							   regexm(dosage_text, "([0-9]+)QDS") | /// 
							   regexm(dosage_text, "QID") | 		///
							   regexm(dosage_text, "([0-9]+)QID"))  ///
							   & dose_frequency==4
		
		* This looks funny below (flag_4 = 3 if dosage_text = "TWICE DAILY") but it's because in these texts it says "TWICE DAILY AND EVERY NIGHT" etc. 
		
			replace flag_4 = 3 if (regexm(dosage_text, "TWICE A DAY") | ///
								   regexm(dosage_text, "TWICE DAILY") | regexm(dosage_text, "[0-9]+BD") | regexm(dosage_text, "[0-9]+ BD")) 	/// 
								   & dose_frequency==4
			
			tab dosage_text if dose_frequency==4 & flag_4==.
			tab dosage_text if flag_4==4
			tab dosage_text if flag_4==3
			
			replace dose_frequency = 3 if flag_4==3
			
			tab dosage_text if dose_frequency==4 & flag_4==.
			replace flag_4 = 2 if dose_frequency==4 & flag_4==. & regexm(dosage_text, "[0-9]+M")
			replace flag_4 = 2 if dose_frequency==4 & flag_4==. & regexm(dosage_text, "[0-9]+OM")
			replace flag_4 = 2 if dose_frequency==4 & flag_4==. & regexm(dosage_text, "[0-9]+ MANE")
			replace flag_4 = 2 if dose_frequency==4 & flag_4==. & regexm(dosage_text, "ONE IN THE MORNING")
			replace flag_4 = 2 if dose_frequency==4 & flag_4==. & regexm(dosage_text, "1 IN THE MORNING")
			replace flag_4 = 2 if dose_frequency==4 & flag_4==. & regexm(dosage_text, "ONE EVERY MORNING")
			replace flag_4 = 2 if dose_frequency==4 & flag_4==. & regexm(dosage_text, "1 EVERY MORNING AND")
			replace flag_4 = 2 if dose_frequency==4 & flag_4==. & regexm(dosage_text, "1 EVERY MORNING 3")
			replace flag_4 = 2 if dose_frequency==4 & flag_4==. & regexm(dosage_text, "ONE EVERY DAY")
			
			replace dose_frequency = 2 if flag_4==2
			replace dose_frequency = 3 if dose_frequency==4 & flag_4==.
			
			drop flag_4
			
			* dose_frequency = 5 (n = 458)
			
			tab dosage_text if dose_frequency==5
			gen flag_5 = 1 if dose_frequency==5 & regexm(dosage_text, "([5]+)D")
			replace flag_5 = 2 if dose_frequency==5 & (regexm(dosage_text, "EVERY MORNING") | regexm(dosage_text, "1 IN THE MORNING") | regexm(dosage_text, "1 MANE") | regexm(dosage_text, "ONE IN THE MORNING"))
			replace flag_5 = 3 if dose_frequency==5 & regexm(dosage_text, "TWICE")
			replace flag_5 = 4 if dose_frequency==5 & (regexm(dosage_text, "THREE") | regexm(dosage_text, "3 TIMES"))
			tab flag_5
			
			replace dose_frequency = 1 if flag_5==1
			replace dose_frequency = 2 if flag_5==2
			replace dose_frequency = 3 if flag_5==3
			replace dose_frequency = 4 if flag_5==4
			
			drop flag_5
			
			* dose_frequency = 6 (n = 120)
			
			tab dosage_text if dose_frequency==6
			gen flag_6 = 4 if dose_frequency==6 & regexm(dosage_text, "THREE")
			replace flag_6 = 3 if dose_frequency==6 & regexm(dosage_text, "TWICE")
			replace flag_6 = 2 if dose_frequency==6 & regexm(dosage_text, "EVERY MORNING")
			tab flag_6
			
			replace dose_frequency = 4 if flag_6==4
			replace dose_frequency = 3 if flag_6==3
			replace dose_frequency = 2 if flag_6==2
			
			drop flag_6
			
			* dose_frequency = 7 (n = 918)
			
			tab dosage_text if dose_frequency==7
			replace dose_frequency = 1 if dose_frequency==7
			
			* dose_frequency = 9 (n = 3)
			
			tab dosage_text if dose_frequency==9	
			replace dose_frequency = 1 if dose_frequency==9
			
			* dose_frequency = 14 (n = 256)
			
			tab dosage_text if dose_frequency==14
			replace dose_frequency = 1 if dose_frequency==14
			
			* dose_frequency = 21 (n = 2)
			
			tab dosage_text if dose_frequency==21
			replace dose_frequency = 2 if dose_frequency==21
			
			tab dosage_text if dose_frequency==. // So where dose_frequency is missing there isn't any dosage_text
			
		* Now I have looked at all the dose frequencies I can change the zero ones that I can't do anything with from dosage text to missing
		
			replace dose_frequency =. if dose_frequency==0

			tab dose_frequency, m // Range 0.3 - 6 with n = 1,227,654 missing values
			
********************************************************************************

* Clean dose_number
		
		* Now let's look at dose_number - remember dose number is the amount taken at each occasion e.g. 2 tablets in the morning dose_frequency = 1 dose_number = 2 
		
			tab dose_number, m // where dose_number is missing n = 488,966
			
		* Anything less than 0.5 and over 6 is probably worth looking into (again missing are the events without dosage_text)
		
		* dose_number = 0 (n = 731,922)
		
			tab dosage_text if dose_number==0
			
			gen flag_0 = 1 if dose_number==0 & (regexm(dosage_text, "ONE TABLET") | 	 ///
												regexm(dosage_text, "TABLET(S) 1") | 		 ///
												regexm(dosage_text, "TAKE A TABLET") | ///
												regexm(dosage_text, "TAKE ONE") | ///
												regexm(dosage_text, "TAKE ONEA") | ///
												regexm(dosage_text, "TAKE TABLET") | ///
												regexm(dosage_text, "USE 1") | ///
												regexm(dosage_text, "USE ONE") | ///
												regexm(dosage_text, "1 - TWICE DAILY") | ///
												regexm(dosage_text, "1 ALTERNATIVE") | ///
												regexm(dosage_text, "0NE"))
			tab dosage_text if flag_0==1
			
			replace dose_number = flag_0 if dose_number==0
			drop flag_0
			
			tab dose_number, m
			
		* Now checking the other values that might not be right
			
			* dose_number = 0.1 (n = 11)
			
			tab productname dosage_text if dose_number>0 & dose_number<0.2 // tablets so 1/10th tablet seems implausible probably 1 rather than 0.1
			replace dose_number = 1 if (dose_number>0 & dose_number<0.2)
			
			* dose_number = 0.25 (n = 94)
			
			tab dosage_text if dose_number>0 & dose_number<0.5
			list dosage_text productname if (dose_number==0.25) // quarter tablets or 0.25mls plausible - drops needs amending based on drug
			replace dose_number = 0.625 if dose_number==0.25 & regexm(productname, "drops")
			
			* dose_number = 0.5 (n = 16,613)
			
			tab dosage_text if dose_number==0.5
			gen point_5_flag = 1 if regexm(dosage_text, "ML") & dose_number==0.5
			tab dosage_text if point_5_flag==1
			tab productname if point_5_flag==1 // drops dosed by 0.4ml and amitriptyline is dosed by 5ml
			
			replace dose_number = 1.25 if point_5_flag==1 & regexm(productname, "drops")
			replace dose_number = 0.1 if point_5_flag==1 & regexm(productname, "amitriptyline")
			
			drop point_5_flag
			
			* dose_number = 0.6
			
			tab dosage_text if dose_number>=0.6 & dose_number<0.6666
			tab productname if dose_number>=0.6 & dose_number<0.6666 // citalopram 40mg/ml dosed at 8 drops (16mg) => 10mg in 0.25ml of this medication => dose_number 0.625
			replace dose_number = 0.625 if (dose_number>=0.6 & dose_number<0.6666) & regexm(dosage_text, "0.25ML")
			replace dose_number = 1.5 if (dose_number>=0.6 & dose_number<0.6666) & regexm(dosage_text, "0.6ML")
			
			* dose_number = 0.66666667 (n = 10)
			
			tab dosage_text if dose_number>0.625 & dose_number<0.75 // 2/3 of a tablet seems implausible - more likely 2 or 3?
			replace dose_number = 2.5 if dose_number>0.625 & dose_number<0.75
			
			* dose_number = 0.75 (n = 1,041)
			
			tab dosage_text if dose_number==0.75
			
			* dose_number = 0.8 (n = 50)
			
			tab dosage_text if dose_number>0.75 & dose_number<0.85 // take one at 8pm so dose_number actually 1
			replace dose_number = 1 if dose_number>0.75 & dose_number<0.85
			
			* dose_number = 1.25 (n = 327)
			tab dosage_text if dose_number==1.25 & regexm(productname, "5ml") // dose per 5ml so dose_number actually 0.25
			replace dose_number = 0.25 if dose_number==1.25 & regexm(productname, "5ml")
			
			tab dosage_text if dose_number==1.25 & regexm(productname, "cipralex 10mg/ml") // 10mg/ml => 0.5 dose_number
			replace dose_number = 0.5 if dose_number==1.25 & regexm(productname, "cipralex 10mg/ml")
			
			tab dosage_text if dose_number==1.25 & regexm(productname, "cipramil 40mg/ml")
			
			tab dosage_text if dose_number==1.25
			
			* dose_number = 1.5 (n = 68,661)
			tab dosage_text if dose_number==1.5
			gen flag_1_half = 0 if dose_number==1.5 & regexm(dosage_text, "ML")
			replace flag_1_half = 1 if dose_number==1.5 & regexm(dosage_text, "MG")
			
				* Checking ml's in this one
			
				tab dosage_text if flag_1_half==0
				gen onehalf_ml_str = regexs(1) if flag_1_half==0 & (regexm(dosage_text, "([1].[5]+)ML"))
				replace onehalf_ml_str = "7.5" if flag_1_half==0 & onehalf_ml_str==""
				tab onehalf_ml_str
			
				gen onehalf_ml = real(onehalf_ml_str)
				tab onehalf_ml dose_ml
				
				replace dose_number = 0.3 if onehalf_ml==1.5 & dose_ml==5 // One of these is 1.5ml of a medicine dosed per 5ml
			
				drop onehalf_ml_str onehalf_ml flag_1_half
				
			* dose_number = 2 (n = 393,931)
			
			tab dosage_text if dose_number==2
			
			gen flag_2 = 1 if regexm(dosage_text, "([2]+) (.*) ([1-4]+) (.*)") & dose_number==2
			replace flag_2 = 1 if regexm(dosage_text, "([2]+)(.*) ([1-4]+)(.*)") & dose_number==2
			replace flag_2 = 1 if regexm(dosage_text, "([2]+)(.*) ([1-4]+) (.*)") & dose_number==2
			replace flag_2 = 1 if regexm(dosage_text, "([2]+)(.*) (ONE) (.*)") & dose_number==2
			replace flag_2 = 1 if regexm(dosage_text, "([2]+)(.*) (TWO) (.*)") & dose_number==2
			replace flag_2 = 1 if regexm(dosage_text, "(TWO) (.*) (ONE) (.*)") & dose_number==2
			replace flag_2 = 1 if regexm(dosage_text, "(TWO) (.*) (TWO) (.*)") & dose_number==2
			replace flag_2 = 1 if regexm(dosage_text, "(TWO) (.*) (THREE) (.*)") & dose_number==2
			replace flag_2 = 1 if regexm(dosage_text, "(TWO) (.*) ([1]+) (.*)") & dose_number==2
			replace flag_2 = 1 if regexm(dosage_text, "(TWO) (.*) ([2]+) (.*)") & dose_number==2
			replace flag_2 = 1 if regexm(dosage_text, "(TWO) (.*) ([3]+) (.*)") & dose_number==2
			
			replace flag_2 =. if (regexm(dosage_text, "THEN") |			///
								  regexm(dosage_text, "INCREASING") | 	///
								  regexm(dosage_text, " (OR) ") | 		///
								  regexm(dosage_text, " (TO) ")) & dose_number==2
								  
			replace flag_2 =. if regexm(dosage_text, " (TIMES) ") & dose_number==2
			
			tab dosage_text if flag_2==1
			tab dosage_text if flag_2==. & dose_number==2
			
			replace dose_number = 1.5 if regexm(dosage_text, "([2]+) (.*) ([1]+)(.*)") & flag_2==1
			replace dose_number = 1.5 if regexm(dosage_text, "([2]+)(.*) ([1]+)(.*)") & flag_2==1
			replace dose_number = 1.5 if regexm(dosage_text, "(TWO) (.*) (ONE) (.*)") & flag_2==1
			replace dose_number = 1.5 if regexm(dosage_text, "(TWO) (.*) ([1]+) (.*)") & flag_2==1
			replace dose_number = 2.5 if regexm(dosage_text, "([2]+)(.*) ([3]+)(.*)") & flag_2==1
			replace dose_number = 2.5 if regexm(dosage_text, "(TWO)(.*) (THREE)(.*)") & flag_2==1
			replace dose_number = 3 if regexm(dosage_text, "(2+) (.*) ([4]+) (.*)") & flag_2==1
			
			drop flag_2
			
			gen flag_2ml = 1 if dose_number==2 & regexm(dosage_text, "ML")
			tab dosage_text if flag_2ml==1
			
			tab dose_ml if flag_2ml==1
			replace dose_number = 0.4 if flag_2ml==1 & dose_ml==5
			
			gen flag_2mg = 1 if dose_number==2 & regexm(dosage_text, "MG")
			tab dosage_text if flag_2mg==1
			
			tab productname if flag_2mg==1 // This looks weird - 2mg daily of 50mg capsules?
			
			drop flag_2ml flag_2mg
			
			* dose_number = 2.25 (n = 269)
			tab dosage_text if dose_number==2.25 // 1, 2 or 3 - all fine
			
			* dose_number = 3 (n = 90,931)
			tab dosage_text if dose_number==3
			gen flag_3 = 0 if dose_number==3 & regexm(dosage_text, "ML")
			
				* Checking ml's in this one
			
				tab dosage_text if flag_3==0
				gen three_ml_str = regexs(1) if flag_3==0 & regexm(dosage_text, "([0-9]+)ML")
				tab three_ml_str
			
				gen three_ml = real(three_ml_str)
				tab three_ml dose_ml
			
				replace dose_number = 1 if three_ml==5 & dose_ml==5
				replace dose_number = 0.6 if three_ml==3 & dose_ml==5
			
				drop three_ml_str three_ml
				
			* Alternate days ones
			gen flag_alt = 1 if dose_number==3 & (regexm(dosage_text, "ALT") |		///
												  regexm(dosage_text, "EVERY OTHER"))
			tab dosage_text if flag_alt==1
			
			replace dose_number = 1.5 if flag_alt==1
			replace dose_number = 3 if flag_alt==1 & regexm(dosage_text, "3")
			
			drop flag_3 flag_alt
			
			* dose_number = 3.5 (n = 784)
			tab dosage_text if dose_number==3.5
			
			tab dose_ml if regexm(dosage_text, "3.5MLS") & dose_number==3.5
			
			replace dose_number = 0.7 if regexm(dosage_text, "3.5MLS") & dose_number==3.5
		
			* dose_number = 3.75 (n = 40)
			list productname dosage_text if dose_number==3.75 // 5ml per dose do dose_number actually 0.75 for 2.5-5ML
			replace dose_number = 0.75 if dose_number==3.75
			
			* dose_number = 4 (n = 13,440)
			
			tab dosage_text if dose_number==4
			gen flag_4_ml = 1 if dose_number==4 & regexm(dosage_text, "ML")
			gen flag_4_drops = 1 if dose_number==4 & regexm(dosage_text, "DROPS")
			
			tab dosage_text if flag_4_ml==1
			tab dose_ml if flag_4_ml==1
			replace dose_number = 0.8 if flag_4_ml==1 
			
			tab dosage_text if flag_4_drops==1
			tab productname if flag_4_drops==1
			replace dose_number = 0.5 if flag_4_drops==1
			
			drop flag_4_ml flag_4_drops
			
			* dose_number = 4.5 (n = 16)
			tab dosage_text if dose_number==4.5 // 4-5 - all fine
			
			* dose_number = 7 (n = 90)
			tab dosage_text if dose_number==7
			replace dose_number = 1 if dose_number==7 & dosage_text=="1X7G HEAPED SP TWICE DAI" // weird because it's a tablet but changing to dose_number 1 regardless - all the rest actually 7
			
			* dose_number = 7.5 (n = 298)
			tab dosage_text if dose_number==7.5	// all 5-10ml so check dose_ml to confirm all are 5ml per dose
			tab dose_ml if dose_number==7.5 // all 5ml per dose so change all dose_number's to 1.5
			replace dose_number = 1.5 if dose_number==7.5
			
			* dose_number = 8 (n = 316)
			tab dosage_text if dose_number==8 // couple of ml/drops to check but other fine
			tab dose_ml dosage_text if dose_number==8 & (regexm(dosage_text, "DROPS") | regexm(dosage_text, "ML")) // drops are dosed per 8 drops (as defined by EMC) so change drops to 1 just need to change the ml one 8ml of a 5ml dose
			replace dose_number = 1.6 if dose_number==8 & dosage_text=="8ML DAILY"
			replace dose_number = 1 if dose_number==8 & regexm(productname, "drops")
			
			* dose_number = 9 (n = 195)
			tab dosage_text if dose_number==9 // 9pm so dose_number can't be determined
			replace dose_number =. if dose_number==9
			
			* dose_number = 10 (n = 2,774)
			tab dosage_text if dose_number==10 // ml and mg make up the majority of these so need to use derived variables to pull them apart
			
			* flag_10 = 0 (ml) flag_10 = 1 (mg)
			
			gen flag_10 = 0 if dose_number==10 & regexm(dosage_text, "ML")
			replace flag_10 = 1 if dose_number==10 & regexm(dosage_text, "MG")
			
			tab dosage_text if flag_10==0
			tab dosage_text if flag_10==1 // that's worked
			
			tab dose_ml if flag_10==0 // mostly 5ml per dose but some 10ml
			replace dose_number = 2 if flag_10==0 & dose_ml==5
			replace dose_number = 1 if flag_10==0 & dose_ml==10
			
			tab dose_mg if flag_10==1 // mostly 10mg but some 20mg and 40mg
			replace dose_number = 1 if flag_10==1 & dose_mg==10
			replace dose_number = 0.5 if flag_10==1 & dose_mg==20
			replace dose_number = 0.25 if flag_10==1 & dose_mg==40
			
			tab dosage_text if dose_number==10
			replace dose_number = 1 if dose_number==10 & (dosage_text=="IOD" | regexm(dosage_text, "([0-9]+)[A-Z]")) // roman numeral one o.d. (daily)
			replace dose_number = 1.5 if dose_number==10 & dosage_text=="10M20N" // o.m (every morning) & o.n. (every night)
			replace dose_number = 1.5 if dose_number==10 & dosage_text=="10M2ON"
			replace dose_number = 2 if dose_number==10 & dosage_text=="10M3ON"
			
			tab dosage_text if dose_number==10
			tab productname if dose_number==10 & regexm(productname, "drops") // Citalopram 40mg/ml is dosed by ml which is 8 drops so dose_number for 10 drops is 1.25 and escitalopram is dosed per ml which is 10 drops so for escitalopram 10 drops is dose_number 1
			replace dose_number = 1.25 if dose_number==10 & regexm(productname, "40mg/ml oral drops")
			replace dose_number = 1 if dose_number==10 & regexm(productname, "10mg/ml oral drops")
			
			tab productname if dose_number==10 // Although it looks like a lot, 10 is plausible for all of them (40-250mg?)
			
			drop flag_10
			
			* dose_number = 10.5 (n = 2)
			tab dosage_text if dose_number==10.5
			replace dose_number = 1.5 if dose_number==10.5 // o.m (every morning) & o.n. (every night)
			
			* dose_number = 11 (n = 10)
			tab dosage_text if dose_number==11 
			tab productname if dose_number==11 // tablets - 11 x mg seems implausible but can't be sure
			
			* dose_number = 12 (n = 60)
			tab dosage_text if dose_number==12 
			
			tab productname if dose_number==12 & regexm(productname, "drops") // Citalopram 40mg/ml is dosed by ml which is 20 drops so dose_number for 12 drops is 0.6 
			replace dose_number = 0.6 if dose_number==12 & regexm(productname, "drops")
			tab dosage_text if dose_number==12 
			tab productname if dose_number==12 
			
			tab productname if dose_number==12 // tablets - 12 x mg seems implausible but can't be sure
			
			* dose_number = 12.5 (n = 16)
			tab dosage_text if dose_number==12.5
			
			tab productname if dose_number==12.5 & regexm(dosage_text, "MG") // Sertraline 50mg therefore 12.5mg is a quarter tablet
			replace dose_number = 0.25 if dose_number==12.5 & regexm(dosage_text, "MG")
			
			tab productname if dose_number==12.5 & regexm(dosage_text, "ML") // All dosed per 5ml therefore dose number for 12.5ml is 2.5
			replace dose_number = 2.5 if dose_number==12.5 & regexm(dosage_text, "ML")
			
			tab dosage_text if dose_number==12.5
			tab productname if dose_number==12.5 // Dosed per 5ml so far assumption that "10 OR 15" means mls therefore dose_number is 2.5
			replace dose_number = 2.5 if dose_number==12.5
			
			* dose_number = 14 (n= 36)
			tab dosage_text if dose_number==14 
			
			tab productname if dose_number==14 & regexm(dosage_text, "DROPS") // Citalopram 40mg/ml is dosed by ml which is 20 drops so dose_number for 14 drops is 0.7
			replace dose_number = 0.7 if dose_number==14 & regexm(dosage_text, "DROPS")
			
			tab productname if dose_number==14 // tablets - 14 x mg seems implausible but can't be sure
			replace dose_number =. if dose_number==14
			
			* dose_number = 15 (n = 313)
			tab dosage_text if dose_number==15
			
			gen flag_15 = 0 if dose_number==15 & regexm(dosage_text, "ML")
			replace flag_15 = 1 if dose_number==15 & regexm(dosage_text, "MG")
			
			tab dosage_text if flag_15==0
			tab dosage_text if flag_15==1 // that's worked	
			
			tab dose_ml if flag_15==0 // all 5ml per dose so can change all dose_number's to 3
			replace dose_number = 3 if dose_number==15 & flag_15==0
			
			tab dose_mg if flag_15==1 // mix of mg
			replace dose_number = 3 if dose_number==15 & flag_15==1 & dose_mg==5
			replace dose_number = 1.5 if dose_number==15 & flag_15==1 & dose_mg==10
			replace dose_number = 1 if dose_number==15 & flag_15==1 & dose_mg==15
			replace dose_number = 0.75 if dose_number==15 & flag_15==1 & dose_mg==20
			replace dose_number = 0.5 if dose_number==15 & flag_15==1 & dose_mg==30
			
			tab productname if dose_number==15 // tablets - 15 x mg seems implausible but can't be sure
			replace dose_number =. if dose_number==15
			
			drop flag_15

			* dose_number = 16 (n = 63)
			tab dosage_text if dose_number==16 
			
			tab productname if dose_number==16 & regexm(dosage_text, "DROPS") // Citalopram 40mg/ml is dosed by ml which is 8 drops so dose_number for 16 drops is 2 & cipramil 40mg/ml is dosed by 8 drops (16mg) so 16 drops means dose_number is 2
			replace dose_number = 2 if dose_number==16 & regexm(productname, "citalopram 40mg/ml oral drops") & regexm(dosage_text, "DROPS") 
			replace dose_number = 2 if dose_number==16 & regexm(productname, "cipramil 40mg/ml") & regexm(dosage_text, "DROPS")
			
			tab productname if dose_number==16 // 16mg of a 40mg/ml & a 20mg/5ml
			
			replace dose_number = 0.4 if dose_number==16 & regexm(productname, "40+mg/ml")
			replace dose_number = 0.8 if dose_number==16 & regexm(productname, "20+mg/5ml")
			
			* dose_number = 20 (n = 1,902)
			tab dosage_text if dose_number==20			
			
			gen flag_20 = 0 if dose_number==20 & regexm(dosage_text, "ML")
			replace flag_20 = 1 if dose_number==20 & regexm(dosage_text, "MG")
			
			tab dosage_text if flag_20==0
			tab dosage_text if flag_20==1 // that's worked	
			
			tab dose_ml if flag_20==0 // all 5ml but 1 10ml
			replace dose_number = 4 if dose_number==20 & flag_20==0 & dose_ml==5
			replace dose_number = 2 if dose_number==20 & flag_20==0 & dose_ml==10
			
			tab dose_mg if flag_20==1 // mix of mg
			replace dose_number = 2 if dose_number==20 & flag_20==1 & dose_mg==10
			replace dose_number = 1 if dose_number==20 & flag_20==1 & dose_mg==20
			replace dose_number = 0.5 if dose_number==20 & flag_20==1 & dose_mg==40
			
			tab dosage_text if dose_number==20
			replace dose_number = 2 if dose_number==20 & regexm(dosage_text, "[20]+[A-Z]")
			
			tab productname if dose_number==20 // all 20mg tabs so changing dose_number to 1 
			replace dose_number = 1 if dose_number==20
			
			drop flag_20
			
			* dose_number = 21 (n = 5)
			tab productname dosage_text if dose_number==21 // all 20mg so I think this is a typo but can't be sure
			
			* dose_number = 22 (n = 1)
			tab productname dosage_text if dose_number==22 // 20mg so I think this is a typo but can't be sure
			
			* dose_number = 25 (n = 99)
			tab dosage_text if dose_number==25			
			
			gen flag_25 = 0 if dose_number==25 & regexm(dosage_text, "ML")
			replace flag_25 = 1 if dose_number==25 & regexm(dosage_text, "MG")
			
			tab dosage_text if flag_25==0
			tab dosage_text if flag_25==1 // that's worked			
			
			tab dose_ml if flag_25==0
			replace dose_number = 5 if flag_25==0
			
			tab dose_mg if flag_25==1
			replace dose_number = 1 if flag_25==1 & dose_mg==25
			replace dose_number = 0.5 if flag_25==1 & dose_mg==50
			
			tab productname dosage_text if dose_number==25 // both 25mg tablets so I'm changing dose_number to 1 for both
			replace dose_number = 1 if dose_number==25
			
			drop flag_25
			
			* dose_number = 28 (n = 216)
			tab dosage_text if dose_number==28 // all these pertain number of tablets in a pack so changing to missing
			replace dose_number =. if dose_number==28
			
			* dose_number = 30 (n 937)
			tab dosage_text if dose_number==30
			
			gen flag_30 = 0 if dose_number==30 & regexm(dosage_text, "ML")
			replace flag_30 = 1 if dose_number==30 & regexm(dosage_text, "MG")
			
			tab dosage_text if flag_30==0
			tab dosage_text if flag_30==1 // that's worked			
			
			tab dose_ml if flag_30==0
			replace dose_number = 6 if flag_30==0			
			
			tab dose_mg if flag_30==1
			replace dose_number = 3 if flag_30==1 & dose_mg==10
			replace dose_number = 2 if flag_30==1 & dose_mg==15
			replace dose_number = 1.5 if flag_30==1 & dose_mg==20
			replace dose_number = 1 if flag_30==1 & dose_mg==30
			
			tab productname dosage_text if dose_number==30
			
			replace dose_number = 3 if dose_number==30 & regexm(dosage_text, "[30]+[A-Z]")
			
			tab dose_mg if dose_number==30
			replace dose_number = 3 if dose_number==30 & dose_mg==10
			replace dose_number = 2 if dose_number==30 & dose_mg==15
			replace dose_number = 1.5 if dose_number==30 & dose_mg==20
			replace dose_number = 1 if dose_number==30 & dose_mg==30
			replace dose_number = 0.5 if dose_number==30 & dose_mg==60
			
			drop flag_30
			
			* dose_number = 40 (n = 1,467)
			tab dosage_text if dose_number==40	
			
			tab dose_mg if dose_number==40 & regexm(dosage_text, "MG")
			replace dose_number = 4 if dose_number==40 & regexm(dosage_text, "MG") & dose_mg==10
			replace dose_number = 2 if dose_number==40 & regexm(dosage_text, "MG") & dose_mg==20
			replace dose_number = 1 if dose_number==40 & regexm(dosage_text, "MG") & dose_mg==40
			
			replace dose_number = 4 if dose_number==40 & regexm(dosage_text, "[40]+[A-Z]")
			
			tab productname if dose_number==40
			replace dose_number = 2 if dose_number==40 & dose_mg==20
			
			tab productname if dose_number==40 // 40mg out of 70mg seems the most plausible but it doesn't give a plausible tablet split
			
			* dose_number = 45 (n = 54)
			tab dosage_text if dose_number==45	
			
			tab dose_mg if dose_number==45
			replace dose_number = 1.5 if dose_number==45 & dose_mg==30
			replace dose_number = 1 if dose_number==45 & dose_mg==45
			
			* dose_number = 50 (n = 400)
			tab dosage_text if dose_number==50
			
			tab dose_mg if dose_number==50
			replace dose_number = 5 if dose_number==50 & dose_mg==10
			replace dose_number = 2 if dose_number==50 & dose_mg==25
			replace dose_number = 1 if dose_number==50 & dose_mg==50
			
			* dose_number = 56 (n = 36)
			tab productname dosage_text if dose_number==56 // these are obviously wrong but no info to make assumptions
			
			* dose_number = 60 (n = 297)
			tab dosage_text if dose_number==60
			
			tab dose_mg if dose_number==60 & regexm(dosage_text, "MG")
			replace dose_number = 6 if dose_number==60 & regexm(dosage_text, "MG") & dose_mg==10
			replace dose_number = 3 if dose_number==60 & regexm(dosage_text, "MG") & dose_mg==20
			replace dose_number = 1 if dose_number==60 & regexm(dosage_text, "MG") & dose_mg==60
			
			replace dose_number = 6 if dose_number==60 & (regexm(dosage_text, "60D") | regexm(dosage_text, "60N"))
			tab dosage_text if dose_number==60 // 50mg tablet so not a plausible tablet split 
			
			* dose_number = 75 (n = 315)
			tab dosage_text if dose_number==75
			
			tab dose_mg if dose_number==75
			replace dose_number = 15 if dose_number==75 & dose_mg==5
			replace dose_number = 3 if dose_number==75 & dose_mg==25
			replace dose_number = 1.5 if dose_number==75 & dose_mg==50
			replace dose_number = 1 if dose_number==75 & dose_mg==75
			replace dose_number = 0.5 if dose_number==75 & dose_mg==150
			
			* dose_number = 84 (n = 5)
			tab productname dosage_text if dose_number==84 // these are obviously wrong but no info to make assumptions
			
			* dose_number = 90 (n = 26)
			tab dosage_text if dose_number==90
			
			tab dose_mg if dose_number==90
			replace dose_number = 3 if dose_number==90 & dose_mg==30
			replace dose_number = 1.5 if dose_number==90 & dose_mg==60
			
			* dose_number = 100 (n = 393)
			tab dosage_text if dose_number==100

			replace dose_number = 4 if dose_number==100 & dose_mg==25
			replace dose_number = 2 if dose_number==100 & dose_mg==50
			replace dose_number = 1 if dose_number==100 & dose_mg==100
			
			* dose_number = 112 (n = 3)
			tab productname dosage_text if dose_number==112	// these are obviously wrong but no info to make assumptions
			
			* dose_number = 120 (n = 3)
			tab dosage_text if dose_number==120
			
			tab dose_mg if dose_number==120
			replace dose_number = 2 if dose_number==120
			
			* dose_number = 150 (n = 973)
			tab dosage_text if dose_number==150
			
			tab dose_mg if dose_number==150 & regexm(dosage_text, "MG")
			replace dose_number = 6 if dose_number==150 & regexm(dosage_text, "MG") & dose_mg==25
			replace dose_number = 3 if dose_number==150 & regexm(dosage_text, "MG") & dose_mg==50
			replace dose_number = 2 if dose_number==150 & regexm(dosage_text, "MG") & dose_mg==75
			replace dose_number = 1.5 if dose_number==150 & regexm(dosage_text, "MG") & dose_mg==100
			replace dose_number = 1 if dose_number==150 & regexm(dosage_text, "MG") & dose_mg==150
			
			tab productname if dose_number==150
			replace dose_number = 15 if dose_number==150
			
			* dose_number = 200 (n = 478)
			tab dosage_text if dose_number==200
			
			tab dose_mg if dose_number==200
			replace dose_number = 4 if dose_number==200 & dose_mg==50
			replace dose_number = 2 if dose_number==200 & dose_mg==100
			
			* dose_number = 300 (n = 85)
			tab dosage_text if dose_number==300	
			
			tab dose_mg if dose_number==300
			replace dose_number = 4 if dose_number==300 & dose_mg==75
			replace dose_number = 3 if dose_number==300 & dose_mg==100
			replace dose_number = 2 if dose_number==300 & dose_mg==150
			replace dose_number = 1.5 if dose_number==300 & dose_mg==200
			
			tab dose_number, m // Now our range is 0.25 to 112
			
			replace dose_number =. if dose_number>20 // Dose numbers above 20 are implausible and can be imputed
			
* As the drops have been problematic for daily dose thus prescription length, cleaning them all together at the end of cleaning dose_number means none can be missed and dose_number can't be mistaken for these medicines

	* Look at the dosage_text for all the products dosed by drops

	tab dosage_text if regexm(productname, "drops")
	gen drops = 1 if regexm(productname, "drops")
	
	* Now generate a variable for the number of drops per dose 
	
	gen drug_drops = 8 if (regexm(productname, "citalopram 40mg/ml") | regexm(productname, "cipramil 40mg/ml")) & drops==1
	replace drug_drops = 20 if regexm(productname, "escitalopram 10mg/ml") & drops==1
	
	* For those advised to take n drops in a day
	
	gen daily_drops_text = 1 if regexm(dosage_text, "[0-9][0-9] DROPS") & drops==1
	replace daily_drops_text = 1 if regexm(dosage_text, "[0-9] DROPS") & drops==1
	tab dosage_text if daily_drops_text==1
	
	gen daily_drops = real(regexs(0)) if regexm(dosage_text, "[0-9]") & daily_drops_text==1
	replace daily_drops = real(regexs(0)) if regexm(dosage_text, "[0-9][0-9]") & daily_drops_text==1 
	
	tab daily_drops
	
		* Now correspond number of drops to the drug 
		
		tab productname if daily_drops!=.

		gen dose_number_drops =.
	
		replace dose_number_drops = daily_drops/drug_drops if daily_drops!=.
	
		tab dose_number_drops
		replace dose_number = dose_number_drops if dose_number_drops!=.
		
	* For those advised to take n ml in a day	
	
	gen daily_drops_ml = 1 if regexm(dosage_text, "[0-9]ML") & drops==1
	replace daily_drops_ml = 1 if regexm(dosage_text, "[0-9] ML") & drops==1
	tab dosage_text if daily_drops_ml==1
	
		* Now correspond number of mls to the drug
		
		tab productname if daily_drops_ml!=.
		
		gen dose_number_ml =. // the number of milligrams per ml in the productname
		replace dose_number_ml = real(regexs(0)) if regexm(productname, "[0-9][0-9]") & daily_drops_ml!=.
		tab dose_number_ml
		
		gen dosage_text_ml =. // the number of milliletres prescribed by the physician
		replace dosage_text_ml = real(regexs(0)) if regexm(dosage_text, "[0-9]") & dose_number_ml!=.
		replace dosage_text_ml = real(regexs(0)) if regexm(dosage_text, "[0-9].[0-9]") & dose_number_ml!=.
		replace dosage_text_ml = real(regexs(0)) if regexm(dosage_text, "[0-9].[0-9][0-9]") & dose_number_ml!=.
		tab dosage_text_ml
	
		gen one_dose_ml =.	// the number of milligrams per dose
		replace one_dose_ml = 16 if regexm(productname, "citalopram(.*)drops")
		replace one_dose_ml = 16 if regexm(productname, "cipramil(.*)drops")
		replace one_dose_ml = 10 if regexm(productname, "cipralex(.*)drops")
		replace one_dose_ml = 10 if regexm(productname, "escitalopram(.*)drops") 
		tab one_dose_ml
		
		gen dose_number_milli = (dosage_text_ml*dose_number_ml)/one_dose_ml
		tab dose_number_milli
		
		replace dose_number = dose_number_milli if dose_number_milli!=.
		
	* For those advised to take n mg in a day
	
	gen daily_drops_mg = 1 if regexm(dosage_text, "[0-9]MG") & drops==1
	replace daily_drops_mg = 1 if regexm(dosage_text, "[0-9] MG") & drops==1
	tab dosage_text if daily_drops_mg==1
	
	gen drops_mg = real(regexs(0)) if regexm(dosage_text, "[0-9]") & daily_drops_mg==1
	replace drops_mg = real(regexs(0)) if regexm(dosage_text, "[0-9][0-9]") & daily_drops_mg==1
	
		* Now correspond number of mgs to the drug
		
		gen dose_number_mg =.
		replace dose_number_mg = drops_mg/one_dose_ml
		
		tab dose_number_mg
		
		replace dose_number = dose_number_mg if dose_number_mg!=.
		
		tab dose_number if drops==1
		
		drop drops drug_drops daily_drops daily_drops_text dose_number_drops daily_drops_ml dose_number_ml dosage_text_ml one_dose_ml dose_number_milli daily_drops_mg drops_mg dose_number_mg
			
			tab dose_number, m // Range 0.25 to 15
			tab dose_frequency, m // Range 0.2 to 4
			
********************************************************************************

* Generating a clean daily_dose
			
			gen clean_daily_dose = dose_number * dose_frequency
			
			tab clean_daily_dose, m // Range 0.1 to 30
			tab daily_dose, m // Range 0 to 600
			
			* Retro-cleaning the odd looking daily doses - going back to dosage_text, dose_number and dose_frequency to check them
			
			tab dose_number if clean_daily_dose==30 // Venlafaxine 37.5mg/5ml at 75mg per day (dose_number wrong)
			replace dose_number = 2 if clean_daily_dose==30
			
			tab dose_frequency dose_number if clean_daily_dose==20 // Dose_number is wrong should be 1
			replace dose_number = 1 if clean_daily_dose==20
			
			tab dosage_text dose_frequency if clean_daily_dose==15
			tab dosage_text dose_number if clean_daily_dose==15
			tab dose_ml if clean_daily_dose==15
			tab productname if clean_daily_dose==15
			replace dose_number = 1 if clean_daily_dose==15 & regexm(dosage_text, "5ML")

			drop clean_daily_dose
			gen clean_daily_dose = dose_number * dose_frequency
			tab clean_daily_dose, m
			
********************************************************************************
			
* quantity -  Total quantity entered by GP for prescribed product

		* We want these to be the same - doses (tablets/drops/5ml etc) not boxes

			tab qty, m // n = 1,224 missing
			
			* qty = . (n = 1,224)
			
			tab packtype_desc if qty==., m // 1 with usable data from packtype_desc
			replace qty = 30 if qty==. & regexm(packtype_desc, "30")
			
			* qty = 0 (n = 4,403)
			
			tab packtype_desc if qty==0
			gen qty_0_str = regexs(1) if regexm(packtype_desc, "([0-9]+) (.*)") & qty==0
			gen qty_0 = real(qty_0_str)
			
			tab qty_0_str, m
			replace qty = qty_0 if qty==0 & qty_0!=.
			
			replace qty =. if qty==0
			
			drop qty_0_str qty_0
			
			* qty = -1 (n = 2)
			
			tab packtype_desc if qty==-1 // No usable data in packtype_desc
			replace qty =. if qty==-1
			
			* qty = 0.5 (n = 10)
			
			tab packtype_desc if qty==0.5 // 1 with usable data "PACK OF 30 (2 X" 
			replace qty = 60 if regexm(packtype_desc, "(.*) [30]") & qty==0.5
			
			replace qty =. if qty==0.5
			
			* qty = 1 (m = 16,456)
			
			tab packtype_desc if qty==1
			
			foreach qty in 7 14 15 21 28 30 42 50 56 60 84 90 100 112 120 {
				
				gen qty_`qty' = regexs(0) if regexm(packtype_desc, "`qty'") & qty==1
				tab packtype_desc qty_`qty'
				
			}
			
				* 7 
				
				tab packtype_desc productname if qty_7=="7"
				replace qty = 7 if qty_7=="7" & packtype_desc=="7"
				replace qty = 14 if qty_7=="7" & regexm(packtype_desc, "ML")
				
				* 14
				
				tab packtype_desc productname if qty_14=="14"
				replace qty = 14 if qty_14=="14"
				
				* 15
				
				tab packtype_desc productname if qty_15=="15"
				
				tab productname if regexm(packtype_desc, "ML") & qty_15!=""
				* For medicines mg/5ml quantity in 150ML is 30
				replace qty = 30 if regexm(packtype_desc, "ML") & regexm(productname, "[5+]ml") & qty_15!=""
				* For medicines mg/10ML quantity in 150ML is 15
				replace qty = 15 if regexm(packtype_desc, "ML") & regexm(productname, "[10+]ml") & qty_15!=""
				
				tab packtype_desc productname if qty_15=="15"
				replace qty = 30 if qty_15=="15" & regexm(packtype_desc, "[2+]X")
				replace qty = 15 if qty_15=="15" & qty==1
				
				* 21
				
				tab packtype_desc if qty_21=="21"
				replace qty = 21 if qty_21=="21"
				
				* 28
				
				tab packtype_desc if qty_28=="28"
				
				replace qty = 56 if qty_28!="" & regexm(packtype_desc, "[2+][*][28]")
				replace qty = 28 if qty_28!="" & qty==1
				
				* 30
				
				tab packtype_desc if qty_30=="30"
				
				replace qty = 60 if qty_30!="" & regexm(packtype_desc, "[2+][*][30]")
				
				tab productname if qty_30!="" & regexm(packtype_desc, "300MLS") // Dose/10ml
				replace qty = 30 if qty_30!="" & qty==1
				
				* 42
				
				tab packtype_desc if qty_42=="42"
				
				replace qty = 42 if qty_42!=""
				
				* 50
				
				tab packtype_desc qty if qty_50=="50"
				
				replace qty = 500 if qty_50!="" & packtype_desc=="PACK OF 500" & qty==1
				
				* 56 
				
				tab packtype_desc qty if qty_56=="56"
				
				replace qty = 56 if qty_56!="" & qty==1
				
				* 60
				
				tab packtype_desc qty if qty_60=="60"
				
				replace qty = 60 if qty_60!=""
				
				* 84
				
				tab packtype_desc qty if qty_84=="84"
				
				replace qty = 84 if qty_84!=""
				
				* 90
				
				tab packtype_desc qty if qty_90=="90"
				
				replace qty = 90 if qty_90!=""
				
				* 100
				
				tab packtype_desc qty if qty_100=="100"
				
				replace qty = 100 if qty_100!=""
				
				* 112
				
				tab packtype_desc qty if qty_112=="112"
				
				replace qty = 112 if qty_112!=""
				
				* 120
				
				tab packtype_desc qty if qty_120=="120"
				
				replace qty = 120 if qty_120!=""
			
			* Drop all the variables generated to help recode qty = 1
		
			foreach qty in 7 14 15 21 28 30 42 50 56 60 84 90 100 112 120 {
				
				drop qty_`qty'
				
			}
			
			tab packtype_desc if qty==1, m
			
			replace qty = 28 if packtype_desc=="CALENDAR PACK O" & qty==1
			replace qty = 42 if packtype_desc=="PACK OF 6WKS" & qty==1
			
			// Month could be 28 days but can't tell for sure - no more usable information in packtype_desc for qty==1
			
			replace qty =. if qty==1
			
			* qty = 2 (n = 5,567)
			
			tab packtype_desc if qty==2
			
			foreach qty in 14 28 30 56 84 100 {
				
				gen qty_`qty'_str = regexs(0) if qty==2 & regexm(packtype_desc, "`qty'")
				tab packtype_desc qty_`qty'_str
				gen qty_`qty' = real(qty_`qty'_str)
				
			}
			
			replace qty = qty_14 if qty_14==14 
			replace qty = qty_28 if qty_28==28
			replace qty = qty_30 if qty_30==30
			replace qty = qty_56 if qty_56==56
			replace qty = qty_84 if qty_84==84
			replace qty = qty_100 if qty_100==100
			
			foreach qty in 14 28 30 56 84 100 {
				
				drop qty_`qty' qty_`qty'_str
				
			}

			replace qty = 28 if qty==2 & regexm(packtype_desc, "CALENDAR")
			
			tab productname packtype_desc if qty==2 & (regexm(packtype_desc, "[150+]ML") | regexm(packtype_desc, "[150+] ML"))
			replace qty = 60 if qty==2 & regexm(productname, "[5+]ml") & regexm(packtype_desc, "[2+] X [150]")
			replace qty = 15 if qty==2 & regexm(productname, "[10+]ml") & regexm(packtype_desc, "[150]")
			
			tab packtype_desc if qty==2
			replace qty =. if qty==2

			* qty = 2.5 (n = 1)
			
			tab packtype_desc if qty==2.5 // No usable information
			
			replace qty =. if qty==2.5
			
			* qty = 3 (n = 2,161)
			
			tab packtype_desc if qty==3
			
			foreach qty in 15 28 30 {
				
				gen qty_`qty'_str = regexs(0) if qty==3 & regexm(packtype_desc, "`qty'")
				tab packtype_desc qty_`qty'_str
				gen qty_`qty' = real(qty_`qty'_str)				
				
			}
			
			replace qty = qty_15 if qty_15==15 
			replace qty = qty_28 if qty_28==28
			replace qty = qty_30 if qty_30==30
			
			foreach qty in 15 28 30 {
				
				drop qty_`qty' qty_`qty'_str
				
			}
			
			tab packtype_desc dose_ml if qty==3 // Dose/5ml prescribed 70mls
			replace qty = 14 if qty==3 & regexm(packtype_desc, "MLS")
			
			replace qty =. if qty==3
			
			* qty = 3.5 (n = 73)
			
			tab packtype_desc if qty==3.5 // No usable information
			
			replace qty =. if qty==3.5
			
			* qty = 4 (n = 1,909)
			
			tab packtype_desc if qty==4
			
			foreach qty in 28 30 56 {
				
				gen qty_`qty'_str = regexs(0) if qty==4 & regexm(packtype_desc, "`qty'")
				tab packtype_desc qty_`qty'_str
				gen qty_`qty' = real(qty_`qty'_str)	
				
			}
			
			replace qty = qty_28 if qty_28==28 
			replace qty = qty_30 if qty_30==30
			replace qty = qty_56 if qty_56==56
			
			foreach qty in 28 30 56 {
				
				drop qty_`qty' qty_`qty'_str
				
			}
			
			tab productname if qty==4 & regexm(packtype_desc, "MLS") // Dose/5ml
			replace qty = 14 if qty==4 & regexm(packtype_desc, "MLS")
			
			tab packtype_desc if qty==4
			
			replace qty = 28 if qty==4 & packtype_desc=="WEEKS"
			
			replace qty =. if qty==4
			
			* qty = 5 (n = 1,607)
			
			tab packtype_desc if qty==5 // No usable information
			
			replace qty =. if qty==5
			
			* qty = 6 (n = 1,308)
			
			tab packtype_desc if qty==6	
			
			foreach qty in 20 28 30 {
				
				gen qty_`qty'_str = regexs(0) if qty==6 & regexm(packtype_desc, "`qty'")
				tab packtype_desc qty_`qty'_str
				gen qty_`qty' = real(qty_`qty'_str)	
				
			}
			
			replace qty = qty_20 if qty_20==20
			replace qty = qty_28 if qty_28==28 
			replace qty = qty_30 if qty_30==30
			
			foreach qty in 20 28 30 {
				
				drop qty_`qty' qty_`qty'_str
				
			}
			
			tab packtype_desc if qty==6
			
			replace qty =. if qty==6
			
			* For qty>=100, replace qty with qty/5 or 10 depending on dose/ml where product is in mls
			
			tab qty, m
			
			replace qty = qty/5 if qty>=100 & (regexm(packtype_desc, "ML")) & regexm(productname, "[5+]ml") // n = 6,898 changed
			replace qty = qty/10 if qty>=100 & (regexm(packtype_desc, "ML")) & regexm(productname, "[10+]ml") // n = 160 changed

			* Now I have used all the information I have I can change the implausible values to missing if there isn't supporting information in packtype_desc
			
			replace qty =. if qty>200
			replace qty = 240 if regexm(packtype_desc, "240")
			replace qty = 500 if regexm(packtype_desc, "500")
			
			tab qty, m // quantity is now clean with missing assigned for implausible values without additional info in packtype_desc
			
			tab packtype_desc numpacks if qty==.
			replace qty = numpacks if numpacks!=0 & numpacks!=. & qty==.
			
			* Now, we can generate prescription length from qty & daily_dose
			
			gen prescr_length = ceil(qty / clean_daily_dose) // rounding to the nearest whole number
			
			tab prescr_length, m // Some still look weird (anything that's less than 5 is strange)
			
			replace prescr_length = 2 if prescr_length<2
			
			tab prescr_length, m // Range 2 - 500
			
********************************************************************************
						
	* Save this as a temporary dataset for hot-decking imputation 
	
	save "$Tempdatadir/AD_pxn_events_from_All_Therapy_for_imputation.dta", replace
	
********************************************************************************

* Stop logging

	log close
	
********************************************************************************
